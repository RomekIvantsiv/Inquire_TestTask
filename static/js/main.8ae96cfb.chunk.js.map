{"version":3,"sources":["store/selectors.ts","api/api.ts","store/index.ts","components/AddComment/AddComment.tsx","components/PostEditor/PostEditor.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/CreatePostForm/CreatePostForm.tsx","App.tsx","index.tsx"],"names":["getPostsSelector","state","posts","getCurrentPostSelector","currentPost","getCurrentPostIdSelector","currentPostId","getComments","comments","BASE_URL","getPosts","a","fetch","method","headers","response","json","getPost","postId","getPostComments","createCommentToPost","body","JSON","stringify","createPost","obj","deletePost","updatePost","setPosts","createAction","setPost","setCurrentPostId","setComments","reducer","createReducer","builder","addCase","action","payload","store","configureStore","AddComment","useState","setBody","dispatch","useDispatch","useSelector","className","onSubmit","event","preventDefault","comment","posId","addComment","name","placeholder","required","value","onChange","target","type","PostEditor","newTitle","setNewTitle","newBody","setNewBody","updatedPost","title","uptadedPost","allPosts","updator","PostComments","useEffect","postFromServer","commentsToPost","console","log","loadPostComments","length","map","id","PostList","postsFromServer","loadPostsFromServer","handleDeleteButton","post","onClick","String","CreatePostForm","setTitle","handleFormSubmit","newPost","updatedPosts","App","isPostSelected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ae96cfb.chunk.js","sourcesContent":["import { State } from '../react-app-env.d';\n\nexport const getPostsSelector = (state: State) => state.posts;\nexport const getCurrentPostSelector = (state: State) => state.currentPost;\nexport const getCurrentPostIdSelector = (state: State) => state.currentPostId;\nexport const getComments = (state: State) => state.comments;\n","import { NewPost } from '../react-app-env.d';\n\nexport const BASE_URL = 'https://bloggy-api.herokuapp.com';\nexport const COMMENTS_URL = 'https://bloggy-api.herokuapp.com/comments';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const getPost = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}?_embed=comments`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const createCommentToPost = async (postId: number, body: string) => {\n  const response = await fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    body: JSON.stringify({ postId, body }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const createPost = async (obj: NewPost) => {\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    body: JSON.stringify(obj),\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const updatePost = async (postId: number, obj: NewPost) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'PUT',\n    body: JSON.stringify(obj),\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n","import {\n  configureStore,\n  createReducer,\n  createAction,\n} from '@reduxjs/toolkit';\n\nimport { State, Post, PostDetails } from '../react-app-env.d';\n\nexport const initialState: State = {\n  posts: [],\n  currentPost: null,\n  currentPostId: '',\n  comments: null,\n};\n\nexport const setPosts = createAction<Post[]>('SET_POSTS');\nexport const setPost = createAction<Post>('SET_POST');\nexport const setCurrentPostId = createAction<string>('SET_CURRENT_POST_ID');\nexport const setComments = createAction<PostDetails>('SET_POST_COMMENTS');\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPosts, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setPost, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentPost = action.payload;\n  });\n  builder.addCase(setCurrentPostId, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentPostId = action.payload;\n  });\n  builder.addCase(setComments, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n});\n\nexport const store = configureStore({ reducer });\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCommentToPost, getPostComments } from '../../api/api';\nimport { setComments } from '../../store';\nimport { getCurrentPostIdSelector } from '../../store/selectors';\nimport './AddComments.scss';\n\nexport const AddComment: React.FC = () => {\n  const [body, setBody] = useState('');\n\n  const dispatch = useDispatch();\n\n  const postId = useSelector(getCurrentPostIdSelector);\n\n  const handlerFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const comment = body;\n\n    const addComment = async (posId: number) => {\n      event.preventDefault();\n\n      await createCommentToPost(posId, comment);\n\n      const comments = await getPostComments(posId);\n\n      dispatch(setComments(comments));\n    };\n\n    addComment(+postId);\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handlerFormSubmit}\n    >\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={({ target }) => {\n            setBody(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPost, getPosts, updatePost } from '../../api/api';\nimport { NewPost } from '../../react-app-env.d';\nimport { setPost, setPosts } from '../../store';\nimport { getCurrentPostIdSelector } from '../../store/selectors';\n\nexport const PostEditor: React.FC = () => {\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const dispatch = useDispatch();\n\n  const postId = useSelector(getCurrentPostIdSelector);\n\n  const clearInputs = () => {\n    setNewBody('');\n    setNewTitle('');\n  };\n\n  const handleFormUpdate = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const updator = async (posId: number) => {\n      const updatedPost: NewPost = {\n        title: newTitle,\n        body: newBody,\n      };\n\n      await updatePost(posId, updatedPost);\n      const uptadedPost = await (getPost(posId));\n      const allPosts = await (getPosts());\n\n      dispatch(setPost(uptadedPost));\n      dispatch(setPosts(allPosts));\n    };\n\n    updator(+postId);\n    clearInputs();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleFormUpdate}\n    >\n      <div className=\"form-field\">\n        <input\n          name=\"body\"\n          placeholder=\"Type new title\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newBody}\n          onChange={({ target }) => {\n            setNewBody(target.value);\n          }}\n        />\n      </div>\n      <div className=\"form-field\">\n        <input\n          name=\"body\"\n          placeholder=\"Type new body\"\n          className=\"NewCommentForm__input\"\n          required\n          value={newTitle}\n          onChange={({ target }) => {\n            setNewTitle(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Update a post\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './PostDetails.scss';\nimport {\n  useDispatch,\n  useSelector,\n} from 'react-redux';\nimport {\n  getComments,\n  getCurrentPostIdSelector,\n  getCurrentPostSelector,\n} from '../../store/selectors';\nimport { getPost, getPostComments } from '../../api/api';\nimport { setComments, setPost } from '../../store';\nimport { AddComment } from '../AddComment';\nimport { PostEditor } from '../PostEditor';\n\nexport const PostComments: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentPost = useSelector(getCurrentPostSelector);\n  const currentPostId = useSelector(getCurrentPostIdSelector);\n  const comments = useSelector(getComments);\n\n  useEffect(() => {\n    const loadPostComments = async () => {\n      try {\n        const postFromServer = await getPost(+currentPostId);\n\n        const commentsToPost = await getPostComments(+currentPostId);\n\n        dispatch(setPost(postFromServer));\n        dispatch(setComments(commentsToPost));\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    };\n\n    loadPostComments();\n  }, [currentPostId]);\n\n  return (\n    <div className=\"App__content\">\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n        <section className=\"PostDetails__post\">\n          <p>\n            <span className=\"PostDetails__description\">Post description: </span>\n            {currentPost?.body}\n          </p>\n        </section>\n        {comments?.comments.length !== 0\n          ? <h3>Comments to post: </h3>\n          : <h3>No comments yet</h3>}\n        <ul className=\"PostDetails__list\">\n          {comments?.comments.map(comment => (\n            <li key={comment.id} className=\"PostDetails__list-item\">\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n        <section className=\"PostDetails__form\">\n          <h3>Add comment</h3>\n          <div className=\"PostDetails__form-wrapper\">\n            <AddComment />\n          </div>\n        </section>\n        <section className=\"PostDetails__form\">\n          <h3>Edit post</h3>\n          <div className=\"PostDetails__form-wrapper\">\n            <PostEditor />\n          </div>\n        </section>\n      </div>\n    </div>\n\n  );\n};\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost, getPosts } from '../../api/api';\nimport { setCurrentPostId, setPosts } from '../../store';\nimport { getCurrentPostIdSelector, getPostsSelector } from '../../store/selectors';\n\nexport const PostList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const posts = useSelector(getPostsSelector);\n  const currentPostId = useSelector(getCurrentPostIdSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await getPosts();\n\n      dispatch(setPosts(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  const handleDeleteButton = async (postId: number) => {\n    await deletePost(postId);\n    const postsFromServer = await getPosts();\n\n    dispatch(setPosts(postsFromServer));\n  };\n\n  return (\n    <div className=\"App__sidebar\">\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <p className=\"PostsList__title\">\n                <span className=\"PostsList__title-bold\">Post title: </span>\n                {post.title}\n              </p>\n              <div className=\"button__container\">\n                {+currentPostId === post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        dispatch(setCurrentPostId(''));\n                      }}\n                    >\n                      Close details\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        dispatch(setCurrentPostId(String(post.id)));\n                      }}\n                    >\n                      Open details\n                    </button>\n                  )}\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    handleDeleteButton(post.id);\n                  }}\n                >\n                  Delete post\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createPost, getPosts } from '../../api/api';\nimport { NewPost } from '../../react-app-env.d';\nimport { setPosts } from '../../store';\nimport './CreatePostForm.scss';\n\nexport const CreatePostForm: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearInputs = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newPost: NewPost = {\n      title,\n      body,\n    };\n\n    await createPost(newPost);\n\n    const updatedPosts = await getPosts();\n\n    dispatch(setPosts(updatedPosts));\n    clearInputs();\n  };\n\n  return (\n    <form\n      className=\"NewPostForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <h2>\n        Add a new post\n      </h2>\n      <div className=\"form-wrapper\">\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Write a title\"\n            className=\"NewPostForm__input\"\n            required\n            value={title}\n            onChange={({ target }) => {\n              setTitle(target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            name=\"body\"\n            placeholder=\"Write description\"\n            className=\"NewPostForm__input\"\n            required\n            value={body}\n            onChange={({ target }) => {\n              setBody(target.value);\n            }}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewPostForm__submit-button button\"\n        >\n          Add a post\n        </button>\n      </div>\n\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport { PostComments } from './components/PostDetails';\nimport { PostList } from './components/PostsList';\nimport { getCurrentPostIdSelector } from './store/selectors';\nimport { CreatePostForm } from './components/CreatePostForm';\n\nexport const App: React.FC = () => {\n  const isPostSelected = useSelector(getCurrentPostIdSelector);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <PostList />\n        {isPostSelected\n        && <PostComments />}\n        <CreatePostForm />\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}